##########################
### General Parameters ###
##########################
# Use this file for a description of all the parameters that can be set or used.

# Whether to use the static occupancy layer for projective integration. If this flag is set to false (default), TSDF integration is used.
use_static_occupancy_layer: false

# Voxel size (in meters) to use for the map.
voxel_size: 0.05

# The name of the TF frame to be used as the global frame.
global_frame: "map"

# Only used if `use_topic_transforms` is set to true. Pose and transform messages will be interpreted as being in this pose frame, and the remaining transform to the sensor frame will be looked up on the TF tree.
pose_frame: "base_link"

#  If the depth data is originating from Realsense Depth Cameras.
is_realsense_data: false

# Whether to output a mesh for visualization in rviz, to be used with `nvblox_rviz_plugin`.
compute_mesh: true

# Whether to compute the ESDF (map of distances to the nearest obstacle).
compute_esdf: true

# Whether to compute the ESDF in 2D (true) or 3D (false).
esdf_2d: false

# Whether to output a distance slice of the ESDF to be used for path planning
# and visualization (even if the computation is 3D, will output a 2D slice
# for viz).
esdf_distance_slice: true

# Whether to integrate color images to color the mesh.
use_color: true

# Whether to integrate depth images.
use_depth: true

# Whether to integrate LiDAR scans.
use_lidar: false

# The *output* slice height for the distance slice and ESDF pointcloud. Does not need to be within min and max height below. In units of meters.
esdf_slice_height: 1.0

# The minimum height, in meters, to consider obstacles part of the 2D ESDF slice.
esdf_2d_min_height: 0.0

# The maximum height, in meters, to consider obstacles part of the 2D ESDF slice.
esdf_2d_max_height: 1.0

# Width of the LIDAR scan, in number of beams. Defaults are for the Velodyne VLP16.
lidar_width: 1800

# Height of the LIDAR scan, in number of beams. Defaults are for the VLP16.
lidar_height: 16

# The vertical field of view of the LIDAR scan, in degrees. Horizontal FoV is assumed to be 360 degrees. This is used to calculate the individual beam angle offsets.
lidar_vertical_fov_deg: 30.0

# Frame to which the map slice bounds visualization is centered on the xy-plane.
slice_visualization_attachment_frame_id: "base_link"

# Side length of the map slice bounds visualization plane.
slice_visualization_side_length: 10.0

# The maximum rate (in Hz) at which to integrate depth images. A value of 0.0 means there is no cap.
max_depth_update_hz: 10.0

# The maximum rate (in Hz) at which to integrate color images into the color layer. A value of 0.0 means there is no cap.
max_color_update_hz: 5.0

# The maximum rate (in Hz) at which to integrate LiDAR scans. A value of 0.0 means there is no cap.
max_lidar_update_hz: 10.0

# The rate (in Hz) at which to update and publish the mesh.
mesh_update_rate_hz: 5.0

# The rate (in Hz) at which to update the ESDF and output the distance slice.
esdf_update_rate_hz: 2.0

# The rate (in Hz) at which to publish the static occupancy pointcloud.
occupancy_publication_rate_hz: 2.0

# Specifies what rate to poll the color & depth updates at. Will exit as no-op if no new images. Set this higher than you expect images to come in at.
max_poll_rate_hz: 100.0

# How many messages to store in the sensor messages queues (depth, color, lidar) before deleting oldest messages.
maximum_sensor_message_queue_length: 30

# Radius around the `map_clearing_frame_id` outside which we clear the map. Note that values <= 0.0 indicate that no clearing is performed.
map_clearing_radius_m: -1.0

# The name of the TF frame around which we clear the map.
map_clearing_frame_id: "base_link"

# The rate (in Hz) at wich we clear the map outside of the `map_clearing_radius_m`.
clear_outside_radius_rate_hz: 1.0

#########################
### Mapper Parameters ###
#########################

# The maximum distance, in meters, to integrate the TSDF or occupancy map up to for depth images.
projective_integrator_max_integration_distance_m: 7.0

# The maximum distance, in meters, to integrate the TSDF or occupancy map up to for LiDAR scans.
lidar_projective_integrator_max_integration_distance_m: 10.0

# The truncation distance, in units of voxels, for the TSDF or occupancy map.
projective_integrator_truncation_distance_vox: 4.0

# The weighting mode, applied to TSDF and color integrations. Options: [`constant`, `constant_dropoff`, `inverse_square`, `inverse_square_dropoff`].
weighting_mode: "constant"

# Maximum weight for the TSDF. Setting this number higher will lead to higher-quality reconstructions but worse performance in dynamic scenes.
tsdf_integrator_max_weight: 5.0

# The inverse sensor model occupancy probability for voxels observed as free space.
free_region_occupancy_probability: 0.3

# The inverse sensor model occupancy probability for voxels observed as occupied.
occupied_region_occupancy_probability: 0.7

# The inverse sensor model occupancy probability for unobserved voxels.
unobserved_region_occupancy_probability: 0.5

# Half the width of the region which is considered as occupied.
occupied_region_half_width_m: 0.1

# The decay probability that is applied to the free region on decay. Must be in `[0.5, 1.0]`.
free_region_decay_probability: 0.55

# The decay probability that is applied to the occupied region on decay. Must be in `[0.0, 0.5]`.
occupied_region_decay_probability: 0.4

# Minimum weight of the TSDF to consider for inclusion in the mesh.
mesh_integrator_min_weight: 0.01

# Whether to weld identical vertices together in the mesh.
mesh_integrator_weld_vertices: true

# Maximum distance, in meters, to integrate the color up to.
color_integrator_max_integration_distance_m: 7.0

# Minimum weight of the TSDF to consider for inclusion in the ESDF.
esdf_integrator_min_weight: 0.0001

# Maximum distance to consider a voxel within a surface for the ESDF calculation.
esdf_integrator_max_site_distance_vox: 1.0

# Maximum distance to compute the ESDF up to, in meters.
esdf_integrator_max_distance_m: 2.0

# Transformer Parameters
# Whether to use TF transforms at all. If set to false, `use_topic_transforms` must be true and `pose_frame` *needs* to be set.
use_tf_transforms: true

# Whether to listen to topics for transforms. If set to true, will try to get `global_frame` to `pose_frame` transform from the topics. If set to false, everything will be resolved through TF.
# If enabled, by default, subscribes to `/transform` geometry_msgs::TransformStamped topic and `/pose` geometry_msgs::PoseStamped topic.
use_topic_transforms: false
